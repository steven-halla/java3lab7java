package Hamiltonian;

import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *<pre>
 * Class        HamiltonianCycleGUI.java
 * Description  A class representing the GUI used in the Hamiltonian Cycle
 *              Application. This program reads data from text files and builds
 *              a graph that is tested for Hamiltonian cycle. A Hamiltonian 
 *              cycle is a closed loop on a graph where every node (vertex) 
 *              is visited exactly once.
 * Platform     jdk 1.8.0_241; NetBeans IDE 11.3; PC Windows 10
 * Course       CS 143
 * Hourse       4 hours and 17 minutes
 * Date         4/5/2021
 * History Log  7/18/2018, 5/7/2020
 * @author	<i>Niko Culevski</i>
 * @version 	%1% %2%
 * @see     	javax.swing.JFrame
 * @see         java.awt.Toolkit 
 *</pre>
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
public class HamiltonianCycleGUI extends javax.swing.JFrame
{
    
    private String edgesFile = "src/Hamiltonian/CitiesEdges.txt";
    private String citiesFile = "src/Hamiltonian/Cities.txt";
    
    
    private StringBuffer output = new StringBuffer();
    private List<AbstractGraph.Edge> list;
    private Graph<String> graph;
    private Map<Integer, String> citiesHashMap = new HashMap<Integer, String>();
    private List<String> cityNames;
    private int numberOfVertices = 0;
    private boolean isConnected = false;
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Constructor  ConnectedGraphGUI()-default constructor
     * Description  Create an instance of the GUI form, set icon image, set
     *              default button, and instantiate list and graph.
     * Date         4/5/2021
     * History Log  7/18/2018, 5/7/2020
     * @author      <i>Niko Culevski</i>
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    public HamiltonianCycleGUI()
    {
        initComponents();
        //set image
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("src/Images/Cities_tiny.png"));
        //set default button
        this.getRootPane().setDefaultButton(goJButton); 
        
        list = new ArrayList<>();
        graph = new UnweightedGraph<>(list, numberOfVertices);
        cityNames = new ArrayList<>();
        
    }
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       readFromFile()
     * Description  Read text file and create ArrayList.
     * Date:        4/23/2019
     * @author      <i>Niko Culevski</i>
     * @param       textFile String
     *</pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void readFromFile(String edgesFile, String citiesFile)
    {    
        int count = 0;
        
        try
        {            
           File file = new File(edgesFile);
           Scanner inFile = new Scanner(file);
           list = new ArrayList();
           
           String line = inFile.nextLine();
           numberOfVertices = Integer.parseInt(line);
           
           while (inFile.hasNext())
           {
               line = inFile.nextLine();
               String[] tokens = line.split("[\\s+]");
               
               int startingVertex = Integer.parseInt(tokens[0].trim());
               for (int i = 1; i < tokens.length; i++)
               {
                   int adjacentVertex = Integer.parseInt(tokens[i].trim());
                   list.add(new AbstractGraph.Edge(startingVertex, adjacentVertex));
               }
           }
           inFile.close();
           file = new File(citiesFile);
           inFile = new Scanner(file);
           while (inFile.hasNext())
           {
               line = inFile.nextLine();
               cityNames.add(line);
               citiesHashMap.put(count, line);
               count++;
           }
           inFile.close();
        }
        catch(FileNotFoundException fnfexp)
        {
            JOptionPane.showMessageDialog(null, "Input error -- File not found.",
                    "File Not Found Error!", JOptionPane.ERROR_MESSAGE);
        }        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        titleJLabel = new javax.swing.JLabel();
        fileJLabel = new javax.swing.JLabel();
        filesJComboBox = new javax.swing.JComboBox<>();
        controlJPanel = new javax.swing.JPanel();
        goJButton = new javax.swing.JButton();
        quitJButton = new javax.swing.JButton();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsJTextArea = new javax.swing.JTextArea();
        personJMenuBar = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        newJMenuItem = new javax.swing.JMenuItem();
        showPictureOfGraphsJMenuItem = new javax.swing.JMenuItem();
        fileJSeparator = new javax.swing.JPopupMenu.Separator();
        printMenuItem = new javax.swing.JMenuItem();
        quitJMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Connected Graph");
        setResizable(false);

        titleJLabel.setFont(new java.awt.Font("Tempus Sans ITC", 2, 42)); // NOI18N
        titleJLabel.setForeground(new java.awt.Color(0, 102, 102));
        titleJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Cities_small.png"))); // NOI18N
        titleJLabel.setText("Hamiltonian Cycle");

        fileJLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fileJLabel.setText("Select File:");

        filesJComboBox.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        filesJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cities.txt" }));

        controlJPanel.setLayout(new java.awt.GridLayout(1, 2, 3, 3));

        goJButton.setBackground(new java.awt.Color(255, 255, 204));
        goJButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        goJButton.setMnemonic('g');
        goJButton.setText("Go");
        goJButton.setToolTipText("Show results");
        goJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                goJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(goJButton);

        quitJButton.setBackground(new java.awt.Color(255, 255, 204));
        quitJButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        quitJButton.setMnemonic('Q');
        quitJButton.setText("Quit");
        quitJButton.setToolTipText("End the Application");
        quitJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                quitJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(quitJButton);

        resultsJTextArea.setEditable(false);
        resultsJTextArea.setBackground(new java.awt.Color(240, 240, 240));
        resultsJTextArea.setColumns(20);
        resultsJTextArea.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        resultsJTextArea.setLineWrap(true);
        resultsJTextArea.setRows(5);
        resultsJTextArea.setWrapStyleWord(true);
        resultsScrollPane.setViewportView(resultsJTextArea);

        fileJMenu.setMnemonic('F');
        fileJMenu.setText("File");

        newJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newJMenuItem.setMnemonic('N');
        newJMenuItem.setText("New");
        newJMenuItem.setToolTipText("Load new Philosopher database");
        newJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(newJMenuItem);

        showPictureOfGraphsJMenuItem.setMnemonic('S');
        showPictureOfGraphsJMenuItem.setText("Show Graph");
        showPictureOfGraphsJMenuItem.setToolTipText("Show picture of cities");
        showPictureOfGraphsJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                showPictureOfGraphsJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(showPictureOfGraphsJMenuItem);
        fileJMenu.add(fileJSeparator);

        printMenuItem.setMnemonic('P');
        printMenuItem.setText("Print Form");
        printMenuItem.setToolTipText("Print Form as GUI");
        printMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                printMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printMenuItem);

        quitJMenuItem.setMnemonic('Q');
        quitJMenuItem.setText("Quit");
        quitJMenuItem.setToolTipText("");
        quitJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                quitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(quitJMenuItem);

        personJMenuBar.add(fileJMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText("Help");

        aboutJMenuItem.setMnemonic('A');
        aboutJMenuItem.setText("About");
        aboutJMenuItem.setToolTipText("Show About form");
        aboutJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutJMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutJMenuItem);

        personJMenuBar.add(helpMenu);

        setJMenuBar(personJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(fileJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(filesJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(controlJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(resultsScrollPane))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(titleJLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(filesJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fileJLabel))
                    .addComponent(controlJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(resultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       printJMenuItemActionPerformed()
     * Description  Event handler to print the for as a GUI. Calls the
     *              PrintUtilities class static printComponent method.
     * @author      <i>Niko Culevski</i>
     * Date         4/5/2021
     * History Log  7/18/2018, 4/3/2020
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void printMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_printMenuItemActionPerformed
    {//GEN-HEADEREND:event_printMenuItemActionPerformed
        PrintUtilities.printComponent(this);
    }//GEN-LAST:event_printMenuItemActionPerformed
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       quitJMenuItemActionPerformed()
     * Description  Event handler to end the application. Calls the quitJButton
     *              doClick event handler,
     * @author      <i>Niko Culevski</i>
     * Date         4/3/2020
     * History Log  7/18/2018     
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void quitJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitJMenuItemActionPerformed
    {//GEN-HEADEREND:event_quitJMenuItemActionPerformed
        quitJButton.doClick();
    }//GEN-LAST:event_quitJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       aboutJMenuItemActionPerformed()
     * Description  Create an About form and show it. 
     * @param       evt java.awt.event.KeyEvent
     * @author      <i>Niko Culevski</i>
     * Date         4/5/2021
     * History Log  7/18/2018, 5/7/2020
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void aboutJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutJMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutJMenuItemActionPerformed
        About aboutWindow = new About(this, true);
        aboutWindow.setVisible(true);
    }//GEN-LAST:event_aboutJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       newJMenuItemActionPerformed
     * Description  Event handler to chose a separate file for a graph. Also
     *              calls readFromFile and createGraph methods.
     * @param       evt java.awt.event.KeyEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void newJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newJMenuItemActionPerformed
    {//GEN-HEADEREND:event_newJMenuItemActionPerformed
        try
        {
            JFileChooser chooser = new JFileChooser("src/Hamiltonian");
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Txt Files", "txt");
            
            chooser.setFileFilter(filter);
            int choice = chooser.showOpenDialog(null);
            if (choice == JFileChooser.APPROVE_OPTION)
            {
                File choosenFile = chooser.getSelectedFile();
                edgesFile = "src/Hamiltonian/" + choosenFile.getName();
                filesJComboBox.setSelectedItem(choosenFile.getName());
                
                readFromFile(edgesFile, citiesFile);
                createGraph();
            }
            else
            {
               JOptionPane.showMessageDialog(null, "Cannot find file.",
                "File Input Error", JOptionPane.WARNING_MESSAGE);
            }
        }
        catch(IllegalArgumentException exp)
        {
            JOptionPane.showMessageDialog(null, "File is not in correct format.",
                "File Input Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_newJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       quitJButtonActionPerformed()
     * Description  Event handler to end the application.
     * @author      <i>Niko Culevski</i>
     * Date         4/3/2020
     * History Log  7/18/2018     
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void quitJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitJButtonActionPerformed
    {//GEN-HEADEREND:event_quitJButtonActionPerformed
        System.exit(0);        
    }//GEN-LAST:event_quitJButtonActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       showPictureOfGraphsMenuItemActionPerformed()
     * Description  Display picture of the two files and the graphs used.
     * @author      <i>Niko Culevski</i>
     * Date         4/3/2020
     * History Log  7/18/2018     
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void showPictureOfGraphsJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_showPictureOfGraphsJMenuItemActionPerformed
    {//GEN-HEADEREND:event_showPictureOfGraphsJMenuItemActionPerformed
        new ShowGraphs(this,true).setVisible(true);
    }//GEN-LAST:event_showPictureOfGraphsJMenuItemActionPerformed
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       goJButtonActionPerformed()
     * Description  Event handler to end the application.
     * @author      <i>Niko Culevski</i>
     * Date         4/3/2020
     * History Log  7/18/2018     
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void goJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_goJButtonActionPerformed
    {//GEN-HEADEREND:event_goJButtonActionPerformed
        try
        {
           resultsJTextArea.setText("");
           output = new StringBuffer();
           String fileComboBox = filesJComboBox.getSelectedItem().toString();
           citiesFile = "src/Hamiltonian/" + fileComboBox;
           readFromFile(edgesFile,citiesFile);
           createGraph();
        }
        catch(Exception exp)
        {
            JOptionPane.showMessageDialog(null, exp.getMessage(),
                "Cannot create graph", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_goJButtonActionPerformed
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       createGraph()
     * Description  Created UnweightedGraph and associated tree and decide if
     *              the graph is connected.
     * @author      <i>Niko Culevski</i>
     * Date         4/3/2020
     * History Log  7/18/2018     
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public void createGraph()
    {
        resultsJTextArea.setText("");
        output = new StringBuffer();
        
        graph = new UnweightedGraph<>(list, numberOfVertices);
        output.append("The number of vertcies is " + numberOfVertices +
                "\n\n");
        
        AbstractGraph<String>.Tree tree = graph.dfs(0);
        output.append(graph.displayEdges().toString() + "\n");
        
        
        
        if (tree.getNumberOfVerticesFound() == numberOfVertices)
        {
            output.append("The graph is connected\n");
            isConnected = true;
        }
        else
        {
            output.append("The graph is not connected\n");
            isConnected = false;
        }
        
        
        
        output.append("\nHamiltonian path: " + graph.getHamiltonianPath(0));
        output.append("\nHamiltonian Cyle: ");
        List result = graph.getHamiltonianCycle();
        result.add("0");
        output.append(result + "\n");
        
        
        int newYorkIndex = cityNames.indexOf("New York");
        result = graph.getHamiltonianCycle(newYorkIndex);
        result.add(newYorkIndex);
        output.append("Hamiltonian cycle from New York:\n" + result);
        resultsJTextArea.setText(output.toString());
        
        
        
        output.delete(0, output.length());
        output.append("Hamiltonian path: " + graph.getHamiltonianPath(0));
        output.append("\n\nHamiltonian cycle (vertices as numbers): ");
        result = graph.getHamiltonianCycle();
        result.add("0");
        output.append(result + "\n");
        
        
        
        result = graph.getHamiltonianCycle(newYorkIndex);
        result.add(newYorkIndex);
        output.append("\nHamiltonian cycle from New York: " + result);
        
        
        
        output.append("\n\nHamiltonian cycle (vertices as cities):\n|");
        List<Integer> hamiltonianCycle = new ArrayList();
        hamiltonianCycle = graph.getHamiltonianCycle();
        for (int item: hamiltonianCycle)
            output.append(citiesHashMap.get(item) + ", ");
        
        output.append(cityNames.get(0) + "]\n\nList of edges from a giving vertext:\n");
        
        Display myDisplay = new Display(output.append(displayEdges((UnweightedGraph)graph)));
        myDisplay.setVisible(true);
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       displayEdges()
     * Description  Displays edges as cities strings.
     * @author      <i>Niko Culevski</i>
     * @param       graph UnweightedGraph
     * @return      output  String
     * Date         4/3/2020
     * History Log  7/18/2018     
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private String displayEdges(UnweightedGraph graph)
    {
        StringBuilder output = new StringBuilder();
        for (int u = 0; u < graph.neighbors.size(); u++)
        {
            output.append(graph.getVertex(u) + " (" + citiesHashMap.get(u) + "): ");
            ArrayList<AbstractGraph.Edge> tempEdge = new ArrayList();
            tempEdge = (ArrayList) graph.neighbors.get(u);
            for(int j = 0; j < tempEdge.size(); j++)
            {
                AbstractGraph.Edge e = tempEdge.get(j);
                output.append("(" + citiesHashMap.get(graph.getVertex(e.u))+
                        ", " + citiesHashMap.get(graph.getVertex(e.v)) + ") ");
                
            }
            output.append('\n');
        }
        return output.toString();
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
     * Method       main()
     * Description  Displays splash screen and the main GUI form.
     * @param       args are the command line strings
     * @author      <i>Niko Culevski</i>
     * Date         4/5/2021
     * History Log  7/18/2018, 5/7/2020
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public static void main(String args[])
    {
        // Show splash screen
//        Splash mySplash = new Splash(4000);     // duration = 5 seconds
//        mySplash.showSplash();                  // show splash screen  
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(HamiltonianCycleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(HamiltonianCycleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(HamiltonianCycleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(HamiltonianCycleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new HamiltonianCycleGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutJMenuItem;
    private javax.swing.JPanel controlJPanel;
    private javax.swing.JLabel fileJLabel;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JPopupMenu.Separator fileJSeparator;
    private javax.swing.JComboBox<String> filesJComboBox;
    private javax.swing.JButton goJButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem newJMenuItem;
    private javax.swing.JMenuBar personJMenuBar;
    private javax.swing.JMenuItem printMenuItem;
    private javax.swing.JButton quitJButton;
    private javax.swing.JMenuItem quitJMenuItem;
    private javax.swing.JTextArea resultsJTextArea;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JMenuItem showPictureOfGraphsJMenuItem;
    private javax.swing.JLabel titleJLabel;
    // End of variables declaration//GEN-END:variables
}
